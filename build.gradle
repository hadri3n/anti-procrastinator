

buildscript {
    apply from: "gradle/init.gradle"
    repositories() {
        project.scriptRepo.each { mvnUrl->
            maven {url mvnUrl}
        }
    }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.0.2.RELEASE'
    }
}

apply plugin: 'eclipse'
apply plugin: 'groovy'
apply plugin: 'spring-boot'

jar {
    baseName = 'aprocrastinator-backend'
    version =  '0.0.1'
}

repositories {
    project.repo.each { mvnUrl->
        maven {url mvnUrl}
    }
}

// Activation du debug sur le port 9999
applicationDefaultJvmArgs = ["-agentlib:jdwp=transport=dt_socket,address=localhost:9999,server=y,suspend=n"]

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.2.2'

    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-data-mongodb'
    compile 'org.springframework.boot:spring-boot-starter-actuator'
    compile 'org.springframework.boot:spring-boot-starter-thymeleaf'


    compile "org.webjars:jquery:2.0.3-1"
    compile "org.webjars:bootstrap:3.1.1-1"
    
    compile 'javax.inject:javax.inject:1'

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
    testCompile 'org.spockframework:spock-spring:0.7-groovy-2.0'
    testCompile 'info.cukes:cucumber-junit:1.1.5'
    testCompile 'info.cukes:cucumber-groovy:1.1.5'
    testCompile 'com.github.groovy-wslite:groovy-wslite:0.8.0'
    testCompile 'org.mongodb:mongo-java-driver:2.12.0'
}

test.testLogging.exceptionFormat = 'full'

configurations {
    functTestCompile.extendsFrom testCompile
    functTestRuntime.extendsFrom testRuntime
}

sourceSets {
    functionalTest {
        groovy.srcDir file('src/testFunctional/groovy')
        resources.srcDir     file('src/testFunctional/resources')
        compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.functTestCompile
        runtimeClasspath = output + compileClasspath + configurations.functTestRuntime
    }
}


task startServer(type:Exec, dependsOn: 'assemble') {
    //commandLine "java -jar ${projectDir}/build/libs/${jar.baseName}-${jar.version}.jar"
    //bootRun.execute()
}

task functionalTest(type: Test) {
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath
    //dependsOn startServer
    //finalizedBy stopMongoDb
}


task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}
